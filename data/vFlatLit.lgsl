#version 410 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec3 aCol;

uniform mat4 m; // model
uniform mat4 v; // view
uniform mat4 p; // perspective
uniform vec4 ourColor;
uniform float myTime;

uniform mat4 lightSpaceMatrix;

out vec3 FragPos;
out vec3 Normal;
out vec4 varyingColor;
out vec3 d1;

out VS_OUT{
	vec3 FragPos;
	vec3 Normal;
	vec2 TexCoords;
	vec4 FragPosLightSpace;
} vs_out;

void main()
{
	vs_out.FragPos = vec3(m * vec4(aPos, 1.0));
    vs_out.Normal = transpose(inverse(mat3(m))) * aNormal;
    //vs_out.TexCoords = aTexCoords;
    vs_out.FragPosLightSpace = lightSpaceMatrix * vec4(vs_out.FragPos, 1.0);
    
	varyingColor = vec4(aCol,1.0);

	
	if (gl_VertexID % 3 == 0)
		d1 = vec3(1,0,0);
	else if (gl_VertexID %3 == 1)
		d1 = vec3(0,1,0);
	else if (gl_VertexID %3 == 2)
		d1 = vec3(0,0,1);

    FragPos = vec3(m * vec4( aPos, 1.0)  );
    //FragPos = vec3(m * (vec4( aPos + (aNormal*sin(myTime)/5.0), 1.0) ) );
    Normal = mat3(transpose(inverse(m))) * aNormal;  
    
    gl_Position = p * v * vec4(FragPos, 1.0);
}

